name: $(Year:yyyy).$(Month).$(DayOfMonth).$(rev:r)

resources:
- repo: self
  clean: true

trigger:
    branches:
        include:
        - master
        - feature/*
        - bug/*
    paths:
        include:
        - /Proxy
        - /Proxy.Test
        
jobs:
- job: 'Job'
  displayName: 'Job SharePoint Proxy'
  pool: 'Hosted Ubuntu 1604'
  condition: succeeded()
  continueOnError: false
  workspace:
    clean: all
  
  variables:
  - group: 'SharePoint-Proxy'
  - name: 'build_configuration'
    value: 'Release'

  steps:

  # Perform Tokens Replacement
  - task: qetza.replacetokens.replacetokens-task.replacetokens@3
    displayName: Replace
    inputs:
      rootDirectory: Proxy.Test
      targetFiles: appsettings.Test.json

  # Perform .Net Core Restore
  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: restore
      projects: '**/*.csproj'

  # Perform Code Security Check
  - task: whitesource.ws-bolt.bolt.wss.WhiteSource Bolt@18
    displayName: 'Code Security Check'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

  # Perform .Net Core Build
  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      projects: '**/*.csproj'
      arguments: '--configuration $(build_configuration)'
  
  # Perform .Net Core Test
  - task: VSTest@2
    displayName: Test
    inputs:
      testAssemblyVer2: |
       **\*Test*.dll
       !**\*TestAdapter.dll
       !**\obj\**
      searchFolder: 'Proxy.Test'
      runTestsInIsolation: true
      codeCoverageEnabled: true
      testRunTitle: 'Integration Tests'
    condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))

  # Perform .Net Core Publish
  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: publish
      publishWebProjects: false
      projects: 'Proxy/Proxy.csproj'
      arguments: '--configuration $(build_configuration) --output Publish'
      zipAfterPublish: false
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'))
  
  - task: Docker@1
    displayName: 'Build Image'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'Docker Registry'
      dockerFile: Proxy/Dockerfile
      imageName: 'SharePoint-Proxy:$(Build.BuildId)'
      includeLatestTag: true
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - task: Docker@1
    displayName: 'Push an image'
    inputs:
      containerregistrytype: 'Container Registry'
      dockerRegistryEndpoint: 'Docker Registry'
      command: 'Push an image'
      imageName: 'SharePoint-Proxy:$(Build.BuildId)'
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  # Publish Artifacts
  - task: PublishBuildArtifacts@1
    displayName: 'Publish'
    inputs:
      PathtoPublish: 'Proxy/Publish/Proxy'
      ArtifactName: Drop
    condition: and(succeeded(), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'Manual'), ne(variables['Build.SourceBranch'], 'refs/heads/master'))

  
